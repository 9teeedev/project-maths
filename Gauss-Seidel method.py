import numpy as np

# Nathaphoom Create Function Gauss-Seidel Method with Auto Pivoting 
# Phongthorn Create Function Show steps

def gauss_seidel(A, b, tol=1e-6, max_iter=100):
    A = A.astype(float)
    b = b.astype(float)
    n = len(b)
    x = np.zeros(n)

    print("=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏Å‡∏≤‡∏™‡πå-‡πÑ‡∏ã‡πÄ‡∏î‡∏• ===\n")

    for k in range(1, max_iter+1):
        print(f"‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {k}:")
        x_old = x.copy()

        for i in range(n):
            # Show steps
            x_number = 0
            move_to_divide = 0
            print("x{} = ( {}".format(i+1, b[i]), end=" ") # x1 = (b
            for j in range(n):
                if j != i:
                    if A[i][j] != 0:
                        print(f"+{abs(A[i][j])}" if A[i][j]<0 else -A[i][j], end="")
                        print(f"({x[x_number]:.4f})", end=" ") # x1 = (b x2 x3 x4)
                else: move_to_divide = A[i][j]
                x_number+=1
            print(f")/{move_to_divide}", end=" ")

            sum_ = np.dot(A[i, :i], x[:i]) + np.dot(A[i, i+1:], x[i+1:])
            x[i] = (b[i] - sum_) / A[i, i]
            print(f"= {x[i]:.4f}")

        econ = abs((x[2]-x_old[2])/x[2])
        print(f"Econ = {econ:.5f} {'>' if econ>tol else '<'} {tol}\n")
        if econ < tol:
            print(f"\n‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏•‡∏±‡∏á {k} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î)\n")
            break

    print("\n‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡∏∑‡∏≠:")
    for i in range(n):
        print(f"x[{i+1}] = {x[i]:.4f}")

    return x


# ===========================
# üîπ ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
# ===========================
print("=== ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏Å‡∏≤‡∏™‡πå-‡πÑ‡∏ã‡πÄ‡∏î‡∏• ===\n")

n = int(input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå (n x n): "))

print("\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå A (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á):")
A = np.zeros((n, n))
for i in range(n):
    A[i] = list(map(float, input(f"‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {i+1}: ").split()))

print("\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå b (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á):")
b = np.array(list(map(float, input().split())))

# By Phongsathorn
import os
os.system('cls' if os.name == 'nt' else 'clear')
print("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå")
for i in range(n):
    print("[", end=" ")
    for j in range(n):
        print(A[i][j], end=" ")
    print("] =",b[i])

print("\n‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏≥‡∏ã‡πâ‡∏≥")
# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏ô‡πÅ‡∏ô‡∏ß‡∏ó‡πÅ‡∏¢‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ===
for i in range(n):
    if A[i, i] == 0:
        for k in range(i+1, n):
            if A[k, i] != 0:
                A[[i, k]] = A[[k, i]]
                b[[i, k]] = b[[k, i]]
                break
        else:
            raise ZeroDivisionError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ Pivot ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {i+1} ‡πÑ‡∏î‡πâ (A[{i},{i}] = 0)")
# === ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ===
for i in range(n): 
    x_number = 1
    move_to_divide = 0
    print("x{} = ( {}".format(i+1, b[i]), end=" ") # x1 = (b

    for j in range(n):
        if j != i:
            if A[i][j] != 0:
                print(f"+{abs(A[i][j])}" if A[i][j]<0 else -A[i][j], end="")
                print(f"(x{x_number})", end=" ") # x1 = (b x2 x3 x4)
        else: move_to_divide = A[i][j]
        x_number+=1
    print(f")/{move_to_divide}")
# End
print("\n‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ 2 ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô")
tol = float(input("\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô (Œµ): "))

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
print("\n‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ 3 ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏≥‡∏ã‡πâ‡∏≥‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô")
gauss_seidel(A, b, tol=tol)
